/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 28 04:50:27 GMT 2024
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Subject_evosuite33_refined_ESTest { // extends Subject_evosuite33_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 0, 0, 1365);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 3, 3, (-1));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 0, 117, 0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[3];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 57, 68, 102);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 2, (-339), (-339));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[1];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, (-2652), (-1), 15);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.siftDown((int[]) null, 0, 0, 100);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      int int0 = subject_SortTools0.upper(intArray0, 1, 1, 358);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int int0 = subject_SortTools0.upper(intArray0, 0, 97, 97);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[7];
      int int0 = subject_SortTools0.upper(intArray0, 2059, 1, (-10086));
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      int int0 = subject_SortTools0.upper(intArray0, 98, (-1), 57);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int int0 = subject_SortTools0.upper(intArray0, (-3), (-1), (-10086));
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.upper((int[]) null, 1543, 1543, 1285);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int int0 = subject_SortTools0.lower(intArray0, 1, 2601, 1);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int int0 = subject_SortTools0.lower(intArray0, 111, 739, 111);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[1];
      int int0 = subject_SortTools0.lower(intArray0, 0, (-2602), 969);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int int0 = subject_SortTools0.lower(intArray0, (-1), (-2115), (-1));
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[1];
      int int0 = subject_SortTools0.lower(intArray0, 0, 0, 969);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.lower((int[]) null, 0, 0, 0);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 0, 0, 0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[20];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 1381, 1381, 1558);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[7];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 1019, (-686), 2992);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 1, 93, 3);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.doRotate((int[]) null, (-1), (-1), (-2191));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 0, 0, 0);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[3];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 312, 312, (-10086));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 11, (-10086), 46);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[1];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 0, 0, 5);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, (-916), 0, 0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.reverse(intArray0, 728, 4);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.reverse(intArray0, 499, 3365);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.reverse((int[]) null, (-3481), (-3481));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      boolean boolean0 = subject_SortTools0.checkRange(4095, (-10086));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      boolean boolean0 = subject_SortTools0.checkRange((-10086), (-193));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 0, 0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 0, 713);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 0, 0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 4597, (-3460));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.swap(intArray0, (-1), 127);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 't';
      int int0 = subject_SortTools0.compare(intArray0, 0, 6);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      intArray0[0] = (-174);
      int int0 = subject_SortTools0.compare(intArray0, 0, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        subject_SortTools0.compare(intArray0, 0, 115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        subject_SortTools0.upper(intArray0, 0, 1, 358);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        subject_SortTools0.compare(intArray0, 890, (-2439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        subject_SortTools0.compare(intArray0, (-1457), (-1415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[1];
      int int0 = subject_SortTools0.compare(intArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      // Undeclared exception!
      try { 
        subject_SortTools0.compare((int[]) null, (-1139), 2521);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[7];
      intArray0[3] = 290;
      subject_SortTools0.insertionSort(intArray0, 1, 4);
      assertArrayEquals(new int[] {0, 0, 0, 0, 290, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int[] intArray1 = subject_SortTools0.insertionSort(intArray0, 2, 2);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int[] intArray1 = subject_SortTools0.insertionSort(intArray0, (-1), (-2231));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.insertionSort(intArray0, 16, (-1298));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.insertionSort((int[]) null, (-230), 61);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("ErPQB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("eTx$)K+X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("3%+*%+r+5cUa~35");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("-0xg HE>r7'p%W_^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0x-qy[wDA&>/t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("02");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((float) 1990, (-3132.0F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((float) (-1), 0.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((-268.0F), (-268.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((double) 36, (double) 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((-1596.5609450933948), (-1284.64));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare(1.0, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.maximum((-10086), (-682), 2489);
      assertEquals(2489, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.maximum(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.maximum((long) (-1), (long) 1031, (long) 1);
      assertEquals(1031L, long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.maximum((-1L), (-3897L), (long) 1885);
      assertEquals(1885L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.minimum(0, 3365, 3365);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.minimum(4289, 846, 234);
      assertEquals(234, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.minimum((long) 0, (-1L), (-1084L));
      assertEquals((-1084L), long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.minimum(1L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.minimum(0L, 143L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("tvXw2U.r,{O4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character t is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("z+Y~=]yfSE7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character z is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("psD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character p is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("h=Hd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character h is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("[e]7s:P F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("MN|H^I_b2'O!p~z4f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("3L");
      assertEquals((short)3, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("5:5&@l*U}CZ<Pl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5:5&@l*U}CZ<Pl is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("true");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // true is not a number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("comp5111.assignment.cut.Subject$TaskHandler");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // comp5111.assignment.cut.Subject$TaskHandler is not a number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("pX8eTWj~3f1VQm.b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // pX8eTWj~3f1VQm.b is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("-0xZ/g7rN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Z/g7rN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("0x\"@$|2/:B~kCu>)|]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"@$|2/:B~kCu>)|]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("9");
      assertEquals((byte)9, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("\"");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("#g", "", "OEO=Y", "#g");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("Pc5)b'r{", "ErPQB", "Pc5)b'r{", "Pc5)b'r{");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("-0xZ/g7rN", "-0xZ/g7rN", "-0xZ/g7rN", "-0xZ/g7rN");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((String) null, "0xZq/g7rN", "0xZq/g7rN", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, "", (String) null, "Z/g7rN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, "Z\"H/q1", "", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, (String) null, "=y9u[", "kMaA6!/W<;Xtk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject("", "0x0x(*{#^ov>/", (String) null, "-0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("ErPQB");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("ErQB");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("0c`");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("u");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(":>");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-4349));
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(integer0, integer1, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(6);
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((Integer) (-10086), integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("mp'Fo=m");
      assertEquals((-10086), int0);
      
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(6);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) (-10086), integer0, (Integer) int0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(123);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = Integer.getInteger("BT,'dhGH2aX`jCSkvPO");
      Integer integer1 = new Integer((-2617));
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, integer1, (Integer) null, integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer((-1116));
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Subject subject0 = new Subject();
      int[] intArray0 = new int[20];
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) 0, (Integer) 0, (Integer) intArray0[15], (Integer) intArray0[15]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject(0, (-10086), 114, (-10086));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(0, (-1), 0, (-649));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((-2593), (-2593), 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((-2182), 1285, 0, (-2182));
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[2];
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, 61, 15, 'C');
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((char[]) null, 443, 91, '/');
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((char[]) null, ' ');
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      Map<String, String> map0 = subject_ParameterHandler0.parse("nc%o%x;R;q<|gG\"j$Y", charArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[4];
      Map<String, String> map0 = subject_ParameterHandler0.parse((String) null, charArray0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[0];
      Map<String, String> map0 = subject_ParameterHandler0.parse("|iTAO[M^Vq-Lg", charArray0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((String) null, (char[]) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[8];
      charArray0[1] = 'M';
      Map<String, String> map0 = subject_ParameterHandler0.parse("=W`/|pw+MiKcGFxxT", charArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.string2char("S50{Xy#`J&DY]9L=");
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, 'W');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[8];
      Map<String, String> map0 = subject_ParameterHandler0.parse("'nVK9[ ", charArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse(" TWB;Mk>", '>');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava("S5KIh");
      assertEquals("S5KIh", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("lYGB/*[0$V_UK_ )", false, false);
      assertEquals("lYGB/*[0$V_UK_ )", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("T#(C5\"", false, false);
      assertEquals("T#(C5\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("j1R'I)J", false, false);
      assertEquals("j1R'I)J", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("'OH\"(0[0", true, true);
      assertEquals("\\'OH\\\"(0[0", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("Jgf3 ?fqbTWq/,Ay(", true, true);
      assertEquals("Jgf3 ?fqbTWq\\/,Ay(", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString((String) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[6];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 1, 3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[2];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 802, (-1));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[4];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, (-1120), (-1670));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[9];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 78, 78);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[4];
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, 0, 1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[6];
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, (-5212), (-5212));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[1];
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, 0, 1574);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.toLowerCase((char[]) null, 1, (-2231));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.newTextBuffer(1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.newTextBuffer(110);
      assertEquals(110, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("-?d+(.d+)?");
      assertNotNull(string0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("-qy[wDA&>/t");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.findNext("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.findNext((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("@aVD(cy/sgZw&&~i$y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("\"g&\"HPL|Nw=v!9t\"[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("Wrong index.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("U:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("oo9[lnDO}S");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("--0x(*{#^ov>/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("*3!.1c'G0S1T]y>CyI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("*da");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("Wrong index.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("$LP[TdNw%DTtuRcH ");
      assertEquals("$LP", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("=(");
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("------compG1o1.assQgnment.cut.Subject");
      assertEquals("------compG1o1", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("5NmHz_kdN}");
      assertEquals("5NmHz_kdN}", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("-?d+(.d+)?");
      assertNotNull(string0);
      assertEquals(".d+", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      // Undeclared exception!
      try { 
        subject_TaskHandler0.getKey("--0x(*{#^ov>/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("comp5111.assignment.cut.Subject$TaskHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("7]Ej/7'xx[G4LLY");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("z`.%yw+*-GDuN");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("IM&]+{']`M5KT>}=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      // Undeclared exception!
      try { 
        subject_TaskHandler0.getIndex("8Ev[xZ4Q19");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("comp5111.assignment.cut.Subject$TaskHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("Jgf3 ?fqbTWq/,Ay(");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("Wrong index.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.string2char("w~4&4pVszv>5CfwP");
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, 45, 0);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 2;
      int hi = 3;
      int[] expectedOutput = {1, 3, 4, 2, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }
  
  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 0;
      int mid = 2;
      int hi = 4;
      int[] expectedOutput = {4, 5, 1, 2, 3};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }
  
  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 3;
      int hi = 3;
      int[] expectedOutput = {1, 4, 2, 3, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 4;
      int expectedOutput = 3;
      assertEquals(expectedOutput, subject_SortTools0.lower(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 1;
      int expectedOutput = 0;
      assertEquals(expectedOutput, subject_SortTools0.lower(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 4;
      int expectedOutput = 3;
      assertEquals(expectedOutput, subject_SortTools0.upper(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 6;
      int expectedOutput = 4;
      assertEquals(expectedOutput, subject_SortTools0.upper(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] array = {1, 2, 3, 4, 5};
      int from = 1;
      int to = 2;
      int[] expected = {1, 3, 2, 4, 5};
      int[] actual = subject_SortTools0.reverse(array, from, to);
      assertArrayEquals(expected, actual);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] array = {1, 2, 3, 4, 5};
      int from = 0;
      int to = 2;
      int[] expected = {3, 2, 1, 4, 5};
      int[] actual = subject_SortTools0.reverse(array, from, to);
      assertArrayEquals(expected, actual);
  }

}
