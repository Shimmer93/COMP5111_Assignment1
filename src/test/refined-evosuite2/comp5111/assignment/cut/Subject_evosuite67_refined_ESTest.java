/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 02 15:05:56 GMT 2024
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Subject_evosuite67_refined_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava("$");
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava("-?\\d+(\\.\\d+)");
      assertEquals("-?d+(.d+)", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[8];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 0, 1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[0];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 830, 1);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.toLowerCase((char[]) null, (-12), 0);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[6];
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, 0, 2);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.string2char("");
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.newTextBuffer('1');
      assertEquals(49, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.newTextBuffer(1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("}W/`6`", true, true);
      assertEquals("}W\\/`6`", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("2gOhlv x&`2<`'^Mg", false, false);
      assertEquals("2gOhlv x&`2<`'^Mg", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("V!o2WfC9rUHyH;H\"v[d", false, true);
      assertEquals("V!o2WfC9rUHyH;H\\\"v[d", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("cH(xZ~x6iA'[I", true, true);
      assertEquals("cH(xZ~x6iA\\'[I", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("i{\u0007_VlPTQ:KSeVC1KS", false, false);
      assertEquals("i{\\u0007_VlPTQ:KSeVC1KS", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString((String) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("5Tc)}>ja");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("D(ORah'o|$2u-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("comp5111.assignment.cut.Subject");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed(",[K#dR^tMt6c {U");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("Zi.g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("M?b];#T>v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested(",7P@g^j*)H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("comp5111.assignment.cut.Subject$TaskHandler");
      assertEquals("comp5111", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("Missing End Delimiter");
      assertEquals("Missing End Delimiter", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      // Undeclared exception!
      try { 
        subject_TaskHandler0.getKey("M(3(iQ8}x!4l_rV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("comp5111.assignment.cut.Subject$TaskHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("-?d+(.d+)?");
      assertNotNull(string0);
      assertEquals(".d+", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("hc4zlve'bO[^{2");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("M?b];#T>v");
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("D!O[/=3TL,xJ,_tT]wu");
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      // Undeclared exception!
      try { 
        subject_TaskHandler0.getIndex("[fS$H;Vdbpv(RevrQQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("comp5111.assignment.cut.Subject$TaskHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("-?d+(.d+)?");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("comp5111.assignment.cut.Subject");
      assertEquals("assignment.cut.Subject", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.findNext("D!O[/=3TL,xJ,_tT]wu");
      assertNotNull(string0);
      assertEquals("D!O[/=3TL,xJ,_tT]", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.findNext("-?\\d+(\\.\\d+)?");
      assertNotNull(string0);
      assertEquals("-?\\d+(\\.\\d+)", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.findNext((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[19];
      int int0 = subject_SortTools0.upper(intArray0, 0, 8, 1);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.upper((int[]) null, 1175, (-1697), (-1697));
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 0, 18);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        subject_SortTools0.siftDown(intArray0, 0, 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.siftDown((int[]) null, (-4320), 46, (-2717));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.rotate((int[]) null, 99, (-2389), 1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      int[] intArray1 = subject_SortTools0.reverse(intArray0, 1, 6);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[3];
      int[] intArray1 = subject_SortTools0.reverse(intArray0, (-561), (-1706));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[19];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 1, 0, 1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        subject_SortTools0.lower(intArray0, 3, 4, (-3960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      int int0 = subject_SortTools0.lower(intArray0, 0, 0, (-504));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.lower((int[]) null, (-126), 2, 88);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      intArray0[1] = 83;
      subject_SortTools0.insertionSort(intArray0, 1, 6);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 83, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.insertionSort((int[]) null, 102, (-10086));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[3];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 0, 0, 0);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.doRotate((int[]) null, 115, 0, 1305);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      boolean boolean0 = subject_SortTools0.checkRange((-1697), (-1697));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("{:xOqX:U,{[0[", "--", "{:xOqX:U,{[0[", "0x-?d+(.d+)?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("=.eT(QoJO&L", "=.eT(QoJO&L", "", "T31S)s,X\"wCr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("", "}B:l*| P", "}B:l*| P", "");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, "[$o!WR6AZMvXqUu^6", "0gM", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((String) null, ")c2Y?;)]", ")c2Y?;)]", "}B:l*| P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, (String) null, "-0xh@cKp", "&uG_$_z*f]Q~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, "k{(GeKSbu@A3#]0cM", (String) null, "--comp5111.assignment.cut.Subject$ParameterHandler");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("j^lTf");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("0x^f");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("N3 ");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("e");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("C%");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(1596);
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer((-5328));
      Integer integer1 = new Integer((-1138));
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(integer0, integer1, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(462);
      Integer integer1 = new Integer(41);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(integer0, integer1, integer0, integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Subject subject0 = new Subject();
      int[] intArray0 = new int[3];
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, (Integer) 0, (Integer) null, (Integer) intArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = Integer.getInteger((String) null);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, (Integer) null, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(108);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer((-702));
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject(0, (-834), (-834), (-2770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(99, 1648, 99, 1648);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(0, 0, (-834), 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((-2168), (-702), (-702), (-2168));
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse("vmsss*%oBmeF=6\"eqYi", 'e');
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[6];
      charArray0[1] = '=';
      charArray0[4] = ';';
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, ';');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((char[]) null, 688, (-1), '<');
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((char[]) null, '#');
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[3];
      charArray0[1] = ')';
      Map<String, String> map0 = subject_ParameterHandler0.parse(",7P@g^j*)H", charArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse("No match.", (char[]) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[2];
      Map<String, String> map0 = subject_ParameterHandler0.parse((String) null, charArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[2] = true;
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[9];
      charArray0[8] = ' ';
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, 'm');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[1];
      Map<String, String> map0 = subject_ParameterHandler0.parse(" Y", charArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("7");
      assertEquals((short)7, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber(".4");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber(";|D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character ; is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("JISnYaqtf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("CR\"WBW:SNj ec^zz1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character C is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("-?d+(.d+)?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -?d+(.d+)? is not a number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("E3e/S.5uSOi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E3e/S.5uSOi is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("comp5111.assignment.cut.Subject$TaskHandler");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // comp5111.assignment.cut.Subject$TaskHandler is not a number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("-0x{0k<BJ[) :M<8|c79");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-{0k<BJ[) :M<8|c79\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("_");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.minimum(623L, (-1845L), (long) (-10086));
      assertEquals((-10086L), long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.minimum(0, 893, (-3000));
      assertEquals((-3000), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.minimum(48, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.maximum((long) (-1580), (-3033L), (long) 76);
      assertEquals(76L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.maximum((-4847L), (-210L), (-4565806301290821395L));
      assertEquals((-210L), long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.maximum((-1), (-1), 124);
      assertEquals(124, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.maximum(82, 4298, 4298);
      assertEquals(4298, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("--]&)3rI:?WS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("E^n?9yg9Kq}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber(".4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("6ftJq2K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0x7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("-0xP`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("IDdYL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IDdYL is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isDigits("7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Integer integer0 = new Integer((-2389));
      int int0 = subject_NumberHandler0.compare((-1.0F), (float) integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((float) 0, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare(0.0F, 3272.3F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((double) 1.0F, (-1.0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((-10086.0), (double) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((-30.56075871647), (-30.56075871647));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This \\'string\\' contains \\/ and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, true, true));
  }
  
  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This 'string' contains / and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, false, false));
  }
  
  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This \\'string\\' contains / and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, true, false));
  }
  
  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This 'string' contains \\/ and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, false, true));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "Hello\\nworld";
      String expectedOutput = "Hello\nworld";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "\\u0048\\u0065\\u006c\\u006c\\u006f";
      String expectedOutput = "Hello";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }
  
  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This is a backslash: \\\\";
      String expectedOutput = "This is a backslash: \\";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }
  
  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This is a tab: \\t, this is a newline: \\n, and this is a Unicode character: \\u0041";
      String expectedOutput = "This is a tab: \t, this is a newline: \n, and this is a Unicode character: A";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }
  
  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 3, 2, 5, 4};
      int i = 0;
      int from = 0;
      int to = 4;
      int[] expectedOutput = {3, 5, 2, 1, 4};
      assertArrayEquals(expectedOutput, subject_SortTools0.siftDown(input, i, from, to));
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 2;
      int hi = 3;
      int[] expectedOutput = {1, 3, 4, 2, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }
  
  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 0;
      int mid = 2;
      int hi = 4;
      int[] expectedOutput = {4, 5, 1, 2, 3};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 1;
      int hi = 2;
      int[] expectedOutput = {1, 2, 3, 4, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }
  
  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 3;
      int hi = 3;
      int[] expectedOutput = {1, 4, 2, 3, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      String input = "0x1A";
      int expectedOutput = 26;
      assertEquals(expectedOutput, subject_NumberHandler0.parseNumber(input));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 4;
      int expectedOutput = 3;
      assertEquals(expectedOutput, subject_SortTools0.lower(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 1;
      int expectedOutput = 0;
      assertEquals(expectedOutput, subject_SortTools0.lower(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 4;
      int expectedOutput = 3;
      assertEquals(expectedOutput, subject_SortTools0.upper(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 6;
      int expectedOutput = 4;
      assertEquals(expectedOutput, subject_SortTools0.upper(input, from, to, val));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] array = {1, 2, 3, 4, 5};
      int from = 1;
      int to = 2;
      int[] expected = {1, 3, 2, 4, 5};
      int[] actual = subject_SortTools0.reverse(array, from, to);
      assertArrayEquals(expected, actual);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] array = {1, 2, 3, 4, 5};
      int from = 0;
      int to = 2;
      int[] expected = {3, 2, 1, 4, 5};
      int[] actual = subject_SortTools0.reverse(array, from, to);
      assertArrayEquals(expected, actual);
  }
}
