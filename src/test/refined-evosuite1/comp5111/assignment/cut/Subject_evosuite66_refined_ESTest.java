/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 01 04:03:51 GMT 2024
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Subject_evosuite66_refined_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      intArray0[2] = (int) 'S';
      subject_SortTools0.siftDown(intArray0, 0, 0, 4);
      assertArrayEquals(new int[] {83, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 0, 0, 4);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      intArray0[0] = (-3);
      intArray0[2] = (int) 'S';
      subject_SortTools0.siftDown(intArray0, 0, 0, 4);
      assertArrayEquals(new int[] {83, 0, (-3), 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      intArray0[1] = (int) 'S';
      intArray0[3] = (int) 'S';
      subject_SortTools0.siftDown(intArray0, 0, 0, 4);
      assertArrayEquals(new int[] {83, 83, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      intArray0[1] = (int) 'S';
      subject_SortTools0.siftDown(intArray0, 0, 0, 4);
      assertArrayEquals(new int[] {83, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 0, 0, 742);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 1, 1, (-1493));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 1, 107, 107);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 3674, 3674, 915);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, 45, (-1045), (-39));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int[] intArray1 = subject_SortTools0.siftDown(intArray0, (-653), 0, 0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.siftDown((int[]) null, 0, (-653), (-653));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 6;
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.upper(intArray0, 0, 1, 6);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[12];
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.upper(intArray0, 0, 1, 6);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      int int0 = subject_SortTools0.upper(intArray0, 0, 2576, 162);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int int0 = subject_SortTools0.upper(intArray0, 0, (-1), 7);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int int0 = subject_SortTools0.upper(intArray0, (-1167), (-790), (-790));
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int int0 = subject_SortTools0.upper(intArray0, 5, 3841, (-1175));
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.upper((int[]) null, 3674, 3674, 55);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[9];
      intArray0[1] = (int) 'h';
      int int0 = subject_SortTools0.lower(intArray0, 0, 8, 1);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[12];
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.lower(intArray0, 0, 1, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int int0 = subject_SortTools0.lower(intArray0, 0, 108, (-1901));
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        subject_SortTools0.lower(intArray0, 0, 1, (-1730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int int0 = subject_SortTools0.lower(intArray0, 85, (-1), 85);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int int0 = subject_SortTools0.lower(intArray0, (-1167), 45, 0);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int int0 = subject_SortTools0.lower(intArray0, 915, 915, 4875);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int int0 = subject_SortTools0.lower((int[]) null, 3674, 786, 2300);
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 0, 0, 0);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 0, 0, 2883);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[3];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 351, 1448, 0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, 4, (-1), 0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      int[] intArray1 = subject_SortTools0.doRotate(intArray0, (-2252), 0, 565);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 0, 4, 4);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[12];
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 1, 1, 1);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[7];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 0, 82, 999);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.rotate((int[]) null, 13, 412, (-1100));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 4287, 0, 0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.rotate((int[]) null, (-1), (-1), 255);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[0];
      int[] intArray1 = subject_SortTools0.reverse(intArray0, 47, 47);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[1];
      int[] intArray1 = subject_SortTools0.reverse(intArray0, 0, (-1));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.reverse((int[]) null, (-1957), (-260));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      boolean boolean0 = subject_SortTools0.checkRange(342, (-494));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      boolean boolean0 = subject_SortTools0.checkRange(0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 0, 108);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[4];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 84, 70);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      int[] intArray1 = subject_SortTools0.rotate(intArray0, 0, 1, 7);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.swap(intArray0, 0, (-2794));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.swap((int[]) null, (-1879), 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        subject_SortTools0.compare(intArray0, 0, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        subject_SortTools0.compare(intArray0, 1586, 1700);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        subject_SortTools0.compare(intArray0, (-3441), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      // Undeclared exception!
      try { 
        subject_SortTools0.compare((int[]) null, 10, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong index.
         //
         verifyException("comp5111.assignment.cut.Subject$SortTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[8];
      intArray0[1] = 2478;
      subject_SortTools0.insertionSort(intArray0, 1, 3);
      assertArrayEquals(new int[] {0, 0, 0, 2478, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[7];
      int[] intArray1 = subject_SortTools0.insertionSort(intArray0, 43, 43);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.insertionSort(intArray0, 0, (-1));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = new int[5];
      int[] intArray1 = subject_SortTools0.insertionSort(intArray0, (-30), (-1));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] intArray0 = subject_SortTools0.insertionSort((int[]) null, (-1099), (-2716));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("13L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("2E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber(".0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("EV p\"aso10og]$NhES");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("2Eeq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0eb*,O2*!|`w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("3..CeAC%YQ`i*_{H+2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("2Eq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("-0xEV p\"aso10og]$NhES");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0x$Y/I#R>OfqB<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("-0xcomp5111.assignment.cut.Subject");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("0+b*EO2*!|`w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("--0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((float) 0, (float) (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((-2859.3489F), (-747.0F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((float) (-1), (-1.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((double) (-747.0F), (double) (-2859.3489F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare((double) 0, 3.5706904249522036);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.maximum((-73), 342, (-800));
      assertEquals(342, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.maximum((-1061), (-1061), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.maximum(0L, 0L, (long) 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.maximum((-1633L), (long) 1, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.minimum(0, 0, (-1061));
      assertEquals((-1061), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.minimum(1, 0, 3402);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.minimum(0L, (-1L), (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      long long0 = subject_NumberHandler0.minimum(0L, 1L, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      boolean boolean0 = subject_NumberHandler0.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber(".0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("`>hPwEe)pz$v6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`>hP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("5p:`82Jq@8ae5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character p is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("L;{e~\"XOb]IgL%J;|D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character L is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("@d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character @ is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("H1)<Y&Z.Pkz'/ F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("oD!ki?%6QARUf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("-?R6J1h1sByU,4Lus{|l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -?R6J1h1sByU,4Lus{|l is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("]}DMqe=h-;l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]}DMqe=h-;l is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("13L");
      assertEquals((short)13, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("Ge");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ge is not a number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("jst?>7 egpp4N[z.f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // jst?>7 egpp4N[z.f is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("comp5111.assignment.cut.Subject$NumberHandler");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // comp5111.assignment.cut.Subject$NumberHandler is not a number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("-0x0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("0x)Q+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")Q+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("0");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      // Undeclared exception!
      try { 
        subject_NumberHandler0.parseNumber("zkH.z7l4%(5om7;Msl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // zkH.z7l4%(5om7;Msl is not a valid number.
         //
         verifyException("comp5111.assignment.cut.Subject$NumberHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber(",");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber("");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      Number number0 = subject_NumberHandler0.parseNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = subject_ParameterHandler0.hasOneTrue(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject("comp5111.assignment.cut.Subject$TaskHandler", "|", "^L?e", "|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("/2,r[7`}dNDz", "", "/2,r[7`}dNDz", "TF%}d{(>hgg0Ud>.?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("--?TVo7s", "}dF", "}dF", "--?TVo7s");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, "%R<g1#x =c,;>t?", "IYBX8x85rO1#", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, "&", (String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((String) null, "-0xEJf2OFRbyE!", "", "p3Wu2#kicQ'/f'n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null, (String) null, "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("", "", ")%;t,w", "H5i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("FANNI");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("--8i]");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("FtGdB");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("f2cyQ");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("T+yt");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("tG`B");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("zWy");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("oK<");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("YEq");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("YjT");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("y+#");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("O/P");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("No");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("nx");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("ON");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("OI");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("oo");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("F");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("f");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("N");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("n");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("T");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("\"");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject("K1kU2l0s");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(1780);
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((Integer) 0, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(513);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(integer0, (Integer) null, integer0, integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(1);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(integer0, (Integer) null, (Integer) null, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = Integer.getInteger("", 1766);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(108);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((Integer) null, integer0, (Integer) null, (Integer) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Integer integer0 = new Integer(108);
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((-54), 0, (-2088), (-54));
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject(15, (-158946602), 15, (-604));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Boolean boolean0 = subject_ParameterHandler0.toBooleanObject((-887), (-887), (-887), 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject(665, 0, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((char[]) null, 12, (-4075), '`');
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((char[]) null, '(');
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[9];
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      Map<String, String> map0 = subject_ParameterHandler0.parse("IM,t0TQ~zw#X2Wv\"", charArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[9];
      Map<String, String> map0 = subject_ParameterHandler0.parse((String) null, charArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Subject subject0 = new Subject();
      char[] charArray0 = new char[0];
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse(",WtJ|JT1y76", charArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      Map<String, String> map0 = subject_ParameterHandler0.parse((String) null, (char[]) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[2];
      Map<String, String> map0 = subject_ParameterHandler0.parse("A=g IS_`!4@f')\n%u", charArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[5];
      charArray0[3] = '=';
      charArray0[4] = 'k';
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, 2, 1043, 'k');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '\"';
      charArray0[4] = '\"';
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, 'i');
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '\"';
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, 'i');
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[4];
      charArray0[3] = 'I';
      Map<String, String> map0 = subject_ParameterHandler0.parse("No Index Value", charArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      Map<String, String> map0 = subject_ParameterHandler0.parse(charArray0, '3');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava("<7$q");
      assertEquals("<7$q", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava("-?\\+(.s+)?");
      assertEquals("-?+(.s+)?", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = "Pl}\\uWlm\"";
      // Undeclared exception!
      try { 
        subject_TextHandler0.unescapeJava(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Wlm\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.unescapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("t_TT$R/1)pR!kHM=", false, false);
      assertEquals("t_TT$R/1)pR!kHM=", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("\"/", false, true);
      assertEquals("\\\"\\/", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("WJ(1:(K1v8M>>'F; Rt", true, false);
      assertEquals("WJ(1:(K1v8M>>\\'F; Rt", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("O>XI7'8sTHPyUWh|(+", false, false);
      assertEquals("O>XI7'8sTHPyUWh|(+", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("\bBEPH,M.", false, true);
      assertEquals("\\bBEPH,M.", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString("7^{T?_`B7\nRLW[`{", false, false);
      assertEquals("7^{T?_`B7\\nRLW[`{", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String string0 = subject_TextHandler0.escapeJavaStyleString((String) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[9];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 0, 1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[5];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, (-1), (-1));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[5];
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 3602, 0);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Subject subject0 = new Subject();
      char[] charArray0 = new char[7];
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray1 = subject_TextHandler0.toUpperCase(charArray0, 1, 78);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[5];
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, 0, 1);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[4];
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, 2706, (-2102));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Subject subject0 = new Subject();
      char[] charArray0 = new char[6];
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, 1, 913);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = new char[1];
      char[] charArray1 = subject_TextHandler0.toLowerCase(charArray0, (-1), 0);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.toLowerCase((char[]) null, (-6346), 8);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.newTextBuffer(1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.newTextBuffer(16);
      assertNotNull(charArray0);
      assertEquals(16, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("-?d+(.d+)?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("M{Z#xQ'I+wQZ(bM/sm");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.remove("--&gJ[fTNR]{{{");
      assertNotNull(string0);
      assertEquals("{{{", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.findNext("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.findNext((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("!]Qdj(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("comp5111.assignment.cut.Subjct");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("No Index Value");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped("/2,r[7`}dNDz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isMapped((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("Y%_h-j{,[v0ejU[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("B>(nw`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("--89j]`OyA9m-u.s:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("s`2q>J$+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.isIndexed((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("No match.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested("4]HQ=\"K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      boolean boolean0 = subject_TaskHandler0.hasNested((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("M[s ");
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("JdoInTO( EO_H");
      assertEquals("JdoInTO", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("H1)<Y&Z.Pkz'/ F");
      assertEquals("H1)<Y&Z", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty("-0x");
      assertEquals("-0x", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getProperty((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      // Undeclared exception!
      try { 
        subject_TaskHandler0.getKey(";={(uWD D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("comp5111.assignment.cut.Subject$TaskHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("-?d+(.d+)?");
      assertNotNull(string0);
      assertEquals(".d+", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("[6O");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("comp5111.assignment.cut.Subject$TaskHandler");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey("\u0000");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      String string0 = subject_TaskHandler0.getKey((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("|l;6[7]");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      // Undeclared exception!
      try { 
        subject_TaskHandler0.getIndex("NuT`H[]to0zV!o,=WZk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No Index Value
         //
         verifyException("comp5111.assignment.cut.Subject$TaskHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      // Undeclared exception!
      try { 
        subject_TaskHandler0.getIndex("=[O,B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("comp5111.assignment.cut.Subject$TaskHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("--&gJ[fTNR]{{{");
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("-?d+(.d+)?");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("comp5111.assignment.cut.Subject$TextHandler");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex(",");
      assertEquals((-10086), int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      char[] charArray0 = subject_TextHandler0.string2char("");
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TaskHandler subject_TaskHandler0 = subject0.new TaskHandler();
      int int0 = subject_TaskHandler0.getIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      int int0 = subject_NumberHandler0.compare(0.0, 0.0);
      Subject.ParameterHandler subject_ParameterHandler0 = subject0.new ParameterHandler();
      // Undeclared exception!
      try { 
        subject_ParameterHandler0.toBooleanObject((Integer) null, (Integer) int0, (Integer) 0, (Integer) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No match.
         //
         verifyException("comp5111.assignment.cut.Subject$ParameterHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This \\'string\\' contains \\/ and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, true, true));
  }
  
  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This 'string' contains / and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, false, false));
  }
  
  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This \\'string\\' contains / and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, true, false));
  }
  
  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This 'string' contains / and \\";
      String expectedOutput = "This 'string' contains \\/ and \\\\";
      assertEquals(expectedOutput, subject_TextHandler0.escapeJavaStyleString(input, false, true));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "Hello\\nworld";
      String expectedOutput = "Hello\nworld";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "\\u0048\\u0065\\u006c\\u006c\\u006f";
      String expectedOutput = "Hello";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }
  
  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This is a backslash: \\\\";
      String expectedOutput = "This is a backslash: \\";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }
  
  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.TextHandler subject_TextHandler0 = subject0.new TextHandler();
      String input = "This is a tab: \\t, this is a newline: \\n, and this is a Unicode character: \\u0041";
      String expectedOutput = "This is a tab: \t, this is a newline: \n, and this is a Unicode character: A";
      assertEquals(expectedOutput, subject_TextHandler0.unescapeJava(input));
  }
  
  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 3, 2, 5, 4};
      int i = 0;
      int from = 0;
      int to = 4;
      int[] expectedOutput = {3, 5, 2, 1, 4};
      assertArrayEquals(expectedOutput, subject_SortTools0.siftDown(input, i, from, to));
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 2;
      int hi = 3;
      int[] expectedOutput = {1, 3, 4, 2, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }
  
  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 0;
      int mid = 2;
      int hi = 4;
      int[] expectedOutput = {4, 5, 1, 2, 3};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 1;
      int hi = 2;
      int[] expectedOutput = {1, 2, 3, 4, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }
  
  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 4, 5};
      int lo = 1;
      int mid = 3;
      int hi = 3;
      int[] expectedOutput = {1, 4, 2, 3, 5};
      assertArrayEquals(expectedOutput, subject_SortTools0.doRotate(input, lo, mid, hi));
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.NumberHandler subject_NumberHandler0 = subject0.new NumberHandler();
      String input = "0x1A";
      int expectedOutput = 26;
      assertEquals(expectedOutput, subject_NumberHandler0.parseNumber(input));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 4;
      int expectedOutput = 3;
      assertEquals(expectedOutput, subject_SortTools0.lower(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 1;
      int expectedOutput = 0;
      assertEquals(expectedOutput, subject_SortTools0.lower(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 4;
      int expectedOutput = 3;
      assertEquals(expectedOutput, subject_SortTools0.upper(input, from, to, val));
  }
  
  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] input = {1, 2, 3, 5, 6};
      int from = 0;
      int to = 4;
      int val = 6;
      int expectedOutput = 4;
      assertEquals(expectedOutput, subject_SortTools0.upper(input, from, to, val));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] array = {1, 2, 3, 4, 5};
      int from = 1;
      int to = 2;
      int[] expected = {1, 3, 2, 4, 5};
      int[] actual = subject_SortTools0.reverse(array, from, to);
      assertArrayEquals(expected, actual);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Subject subject0 = new Subject();
      Subject.SortTools subject_SortTools0 = subject0.new SortTools();
      int[] array = {1, 2, 3, 4, 5};
      int from = 0;
      int to = 2;
      int[] expected = {3, 2, 1, 4, 5};
      int[] actual = subject_SortTools0.reverse(array, from, to);
      assertArrayEquals(expected, actual);
  }

}
